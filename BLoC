<생성패턴>
객체 인스턴스를 생성하는 패턴으로, 클라이언트와 그 클라이언트가 생성해야 하는 객체 인스턴스 사이의 연결을 끊어 주는 패턴

- 싱글턴 패턴
- 추상 팩토리 패턴
- 팩토리 메소드 패턴

<행동패턴>
클래스와 객체들이 상호작용하는 방법과 역할을 분담하는 방법을 다루는 패턴

- 템플릿 메소드 패턴
- 싱글턴 패턴
- 상태 패턴
- 반복자 패턴
- 전략 패턴
- 옵저버 패턴

<구조패턴>
클래스와 객체를 더 큰 구조로 만들 수 있게 구상을 사용하는 패턴입니다.

- 데코레이터 패턴
- 프록시 패턴
- 컴포지트 패턴
- 어댑터 패턴
- 퍼사드 패턴

<bloc>
뷰에서의 비즈니스 로직을 어떻게 하면 분리 할 수 있을까에 대한 패턴
provider패턴도 목적은 같지만 분리된 로직에서 뷰까지 상태에 흐름의 방법에 따라 달라진 명칭

Bussiness Logic Component

BLoC 객체의 상태가 바뀌면 이 객체의 정보를 받는 객체는 상태를 변환한다.
BLoC 객체는 UI 객체로 부터 이벤트를 받으면, BLoC 객체는 필요한 Provider 나 Repository 로 부터 데이터를 전달받아, 비즈니스 로직을 처리한다.
비즈니스 로직을 처리한후, BLoC 객체의 정보를 받는 객체 들에게 상태를 전달한다.